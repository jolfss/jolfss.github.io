/**
 * .rem-height-ceil-js
 * 
 * This script runs once on page load and again on window resize.
 * It finds all elements with the class 'rem-height-ceil-js', calculates their actual content
 * height, and then adjusts the container's height to be the nearest multiple of 1rem (or 2rem in this specific logic).
 * 
 * Requires:
 * - The container does not contain any elements that are themselves rem-height-ceil-js.
 *   (Or really *any* other dynamically resizing elements.)
 * 
 * NOTE: This script was originally generated by Google Gemini and has been modified.
 */

// We define the function that performs the resizing logic.
const resizeContainers = () => {
    try {
        // Select all the containers that need their height adjusted.
        const containers = document.querySelectorAll('.rem-height-ceil-js');
        

        if (containers.length === 0) {
            // This is not an error, just a state, so a console.log is fine.
            // It will show on the first run if no containers are present.
            console.log("Resizable container script ran, but no elements with the class '.rem-height-ceil-js' were found.");
            return;
        }

        // Compute the pixel value of 1rem.
        const remInPixels = parseFloat(getComputedStyle(document.documentElement).fontSize);
        if (isNaN(remInPixels) || remInPixels <= 0) {
            console.error("Could not determine the pixel value of 1rem. Aborting script.");
            return;
        }

        // Iterate over each container and adjust its height.
        containers.forEach((container, index) => {
            // Temporarily reset height to auto to measure the natural content height accurately on resize.
            container.style.height = 'auto';

            // Get the total height of the content within the box.
            const contentHeight = container.scrollHeight;

            // Calculate the new height ceiled to the nearest multiple of (2 * 1rem).
            const stepHeight = 2 * remInPixels; // The height step (e.g., 2rem in pixels)
            const newHeightInPixels = Math.ceil(contentHeight / stepHeight) * stepHeight;

            // Apply the new height to the container.
            container.style.height = `${newHeightInPixels}px`; //TODO: Enable

            // This log is useful for debugging but can be commented out in production.
            // console.log(`Container ${index + 1}: Original height ~${contentHeight}px. Adjusted to ${newHeightInPixels}px.`);
        });

    } catch (error) {
        console.error("An error occurred during the rem resize container script:", error);
    }
};

// --- Event Listeners ---

// 1. Run the script once the initial page content is loaded.
window.onload = resizeContainers;


// 2. Rerun the script when the window is resized (with debouncing).
let resizeTimer; // A timer variable to hold the timeout ID.

window.onresize = () => {
    // Clear the previous timeout to reset the timer.
    clearTimeout(resizeTimer);
    
    // Set a new timeout. The resizeContainers function will only run after 
    // the user has stopped resizing for 50ms.
    resizeTimer = setTimeout(resizeContainers, 50); 
};
